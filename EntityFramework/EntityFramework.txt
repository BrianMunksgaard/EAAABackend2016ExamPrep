
1) Entity framework is an ORM (object-relational mapper) that enables us to connect to the DB (SQL server)
and map DB to our models and vice versa.
2) One of the core capabilities of the Entity Framework is generation of SELECT, UPDATE, INSERT and DELETE commands.
3) The Entity Framework lets developers express queries against the model rather than concern themselves with
details of the database.

Application -> Entity Framework -> ADO.NET -> SQL Database ->


4) Application uses linq queries to "talk" with entity framework (through DbContext class)
5) Application design strategies: Domain Driven (code first) or Data Driven (code first with existing database)

6) System.Data.Entity.DbContext (represents database session). Primary class for working with data.

7) In nuget package manager console: Install-Package EntityFramework
8) Add connection string to web.config:
	<connectionStrings>
		<add name="ExamContext" 
		connectionString="Data Source=(localdb)\v11.0; Integrated Security=True; AttachDbFilename=|DataDirectory|ExamDB.mdf"
		providerName="System.Data.SqlClient" />
	</connectionStrings>
9) Inherit DbContext in application DAL folder.
	/// <summary>
    /// Database context for the application.
    /// </summary>
    public class ExamContext : DbContext
    {
         /// <summary>
        /// Context constructor.
        /// </summary>
        public ExamContext() : base("ExamContext") { } // ExamContext in web.config.

        /// <summary>
        /// Students data.
        /// </summary>
        public DbSet<Student> Students { get; set; }
        
        /// <summary>
        /// Courses data.
        /// </summary>
        public DbSet<Course> Courses { get; set; }
    }

10) Seeding the database.
    /// <summary>
    /// Database initializer.
    /// </summary>
    public class ExamContextInitializer : System.Data.Entity.DropCreateDatabaseIfModelChanges<ExamContext>
    {
        /// <summary>
        /// Add information to the database.
        /// </summary>
        /// <param name="context"></param>
        protected override void Seed(ExamContext context)
        {
            List<Student> students = new List<Student>
            {
                new Student
                {
                    StudentName = "Brian Munksgaard"
                },
                new Student
                {
                    StudentName = "Jens Christian Rasch"
                }
            };

            students.ForEach(s => context.Students.Add(s));
            context.SaveChanges();

            List<Course> courses = new List<Course>
            {
                new Course
                {
                    CourseName = "Backend"
                },
                new Course
                {
                    CourseName = "Frontend"
                },
                new Course
                {
                    CourseName = "Interfacedesign"
                }
            };

            courses.ForEach(c => context.Courses.Add(c));
            context.SaveChanges();
        }
    }

	web.config:
		<add key="DatabaseInitializerForType CodeFirst.DAL.ExamContext, CodeFirst" value="CodeFirst.DAL.ExamContextInitializer, CodeFirst" /> 
		
11) Use migrations.
	Uncomment or delete the Initializer element in Web.config file.

	PM> enable-migrations
	PM> add-migration InitialCreate
	PM> update-database ...

	PM> add-migration EmployeeTableCreate
	PM> update-database



15) Fluent API.
	Property Mapping
	Type Mapping
	Configuring Relationships

	I Context:
	Maximum length of a property: modelBuilder.Entity<Department>().Property(t => t.Name).HasMaxLength(50);
	Required property: modelBuilder.Entity<Department>() .Property(t => t.Name).IsRequired();
	ColumnType: modelBuilder.Entity<Invoice>().Property(p => p.OrderDate).HasColumnType("datetime2");

16) Logging SQL.
	<interceptors>
		<interceptor type="System.Data.Entity.Infrastructure.Interception.DatabaseLogger, EntityFramework">
			<parameters>
				<parameter value="C:\Temp\LogSQLOutput.txt"/>
			</parameters>
		</interceptor>
	</interceptors>
